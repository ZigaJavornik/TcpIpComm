<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="FB_TcpIpCommControl" Id="{fd79d544-45d1-463d-8e94-298cab5b93fb}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_TcpIpCommControl

VAR
	_socketCloseAll			: Tc2_TcpIp.FB_SocketCloseAll;
	_error					: BOOL;
	_errorReceiving			: BOOL;
	_errorSending			: BOOL;
	_isConnected			: BOOL;
	_clientServerControl	: Tc2_TcpIp.FB_ClientServerConnection;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[_clientServerControl(nMode := Tc2_TcpIp.CONNECT_MODE_ENABLEDBG);
_socketCloseAll(bExecute := FALSE, sSrvNetId := '');
_error := _errorReceiving OR _errorSending OR _clientServerControl.bError;]]></ST>
    </Implementation>
    <Folder Name="Private" Id="{389f97e3-bf5f-05ae-2f13-705ec15cee9e}">
      <Folder Name="Methods" Id="{023e6ddb-0836-0e49-2eba-373228fc2b60}" />
      <Folder Name="Properties" Id="{9bc1c6cc-6e96-0017-210d-74d0b31ccf69}" />
    </Folder>
    <Folder Name="Pulic" Id="{c60aecea-d635-088e-04a6-182c42015718}">
      <Folder Name="Methods" Id="{f6ea767e-2c80-0320-2c50-ca332a25c49d}" />
      <Folder Name="Properties" Id="{1e73bf64-8442-0699-0f0d-12fc7815d87d}" />
    </Folder>
    <Method Name="Connect" Id="{e1b034f2-070e-4d08-81cf-cdc063f262be}" FolderPath="Pulic\Methods\">
      <Declaration><![CDATA[METHOD Connect : BOOL
VAR_INPUT
	Ipv4Address	: Tc2_System.T_IPv4Addr;
	Port		: UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF THIS^.IsConnected = FALSE THEN
	_clientServerControl.bEnable := TRUE;
	_clientServerControl.sRemoteHost := Ipv4Address;
	_clientServerControl.nRemotePort := Port;
	_clientServerControl.sSrvNetID := '';
ELSE
	Connect := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Disconnect" Id="{d19beda7-1d0e-4fc3-a093-6322a6422700}" FolderPath="Pulic\Methods\">
      <Declaration><![CDATA[// Disconnects from the server and closes all active socket connections
METHOD Disconnect : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[_clientServerControl.bEnable := FALSE;
IF _clientServerControl.hSocket.handle <> 0 THEN
	_socketCloseAll(bExecute := FALSE, sSrvNetId := '');
	_socketCloseAll(bExecute := TRUE, sSrvNetId := '');
END_IF
Disconnect := NOT THIS^.IsConnected;


]]></ST>
      </Implementation>
    </Method>
    <Property Name="Error" Id="{60d8bc34-46e0-454f-8a36-60e55751a023}" FolderPath="Pulic\Properties\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'variable'}
PROPERTY Error : BOOL]]></Declaration>
      <Get Name="Get" Id="{532dae0a-8ce1-4636-9534-c59315d8a95b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Error := _error;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="IsConnected" Id="{62428a97-7ac1-4a7f-b09f-13dad2b343d4}" FolderPath="Pulic\Properties\">
      <Declaration><![CDATA[{attribute 'monitoring' := 'variable'}
PROPERTY PUBLIC IsConnected : BOOL]]></Declaration>
      <Get Name="Get" Id="{eb13dccb-aa08-41f0-8bbc-7f030a9f8461}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsConnected := _clientServerControl.eState = Tc2_TcpIp.E_SocketConnectionState.eSOCKET_CONNECTED;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Receive" Id="{46f6766c-31cf-4a63-b72d-2ae9231f0715}" FolderPath="Pulic\Methods\">
      <Declaration><![CDATA[METHOD Receive : BOOL
VAR_INPUT
	refResponse	: REFERENCE TO Tc2_System.T_MaxString;
END_VAR
VAR_INST
	sResponse			: Tc2_System.T_MaxString;
	eSocketReceiveState	: E_SocketReceiveState;
	fbSocketReceive		: Tc2_TcpIp.FB_SocketReceive;
	bReceiveError		: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE eSocketReceiveState OF
	E_SocketReceiveState.READY:
		fbSocketReceive(bExecute := FALSE);
		IF THIS^.IsConnected THEN
			bReceiveError := FALSE;
			fbSocketReceive(
				bExecute := TRUE,
				cbLen := SIZEOF(refResponse),
				pDest := ADR(refResponse),
				sSrvNetId := '',
				hSocket := _clientServerControl.hSocket);
			eSocketReceiveState := E_SocketReceiveState.RECEIVING;
		END_IF
	
	E_SocketReceiveState.RECEIVING:
		fbSocketReceive(bExecute := FALSE);
		IF NOT fbSocketReceive.bError AND_THEN NOT fbSocketReceive.bBusy THEN
			eSocketReceiveState := E_SocketReceiveState.DONE;
		ELSIF fbSocketReceive.bError THEN
			eSocketReceiveState := E_SocketReceiveState.ERROR;	
		END_IF
	
	E_SocketReceiveState.DONE:
		Receive := TRUE;
		eSocketReceiveState := E_SocketReceiveState.READY;
	
	E_SocketReceiveState.ERROR:
		bReceiveError := TRUE;
		eSocketReceiveState := E_SocketReceiveState.DONE;
END_CASE

_errorReceiving := bReceiveError;]]></ST>
      </Implementation>
    </Method>
    <Property Name="ReconnectPeriod" Id="{aad75e38-b8e4-4d9a-9646-b55bad013266}" FolderPath="Pulic\Properties\">
      <Declaration><![CDATA[(* Gets or sets the reconnect period. 
The value should not be set too low, since timeout periods of > 30 s may occur in the event of a network interruption. 
If the value is too low, command execution would be interrupted prematurely, and ADS error code 1861 (timeout elapsed) 
would be returned instead of the Winsocket error WSAETIMEDOUT.*)
PROPERTY PUBLIC ReconnectPeriod : TIME]]></Declaration>
      <Get Name="Get" Id="{bbe352d2-810d-4338-953d-1a213042f053}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ReconnectPeriod := _clientServerControl.tReconnect;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{5692ca9f-3fd5-4406-95fe-a74a18518302}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF ReconnectPeriod > T#30S THEN
	_clientServerControl.tReconnect := ReconnectPeriod;
END_IF
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Send" Id="{de956caf-69b4-4090-b195-97973b802f8c}" FolderPath="Pulic\Methods\">
      <Declaration><![CDATA[METHOD Send : BOOL
VAR_INPUT
	sCommand	: Tc2_System.T_MaxString;	// Command to be send
END_VAR
VAR_INST
	fbSocketSend		: Tc2_TcpIp.FB_SocketSend;
	eSsocketSendState	: E_SocketSendState;
	arrSendDataBytes	: ARRAY[0..255] OF BYTE;
	nSendDataCount		: UDINT;
	bSendError			: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE eSsocketSendState OF
	E_SocketSendState.READY:
		bSendError := FALSE;
		IF sCommand <> '' THEN
			// Clear array for new data
			Tc2_System.MEMSET(
				destAddr := ADR(arrSendDataBytes),
				n := SIZEOF(arrSendDataBytes),
				fillByte := 0);
				
			// Prepare data
			Tc2_System.MEMCPY(
				destAddr := ADR(arrSendDataBytes),
				n := SIZEOF(sCommand),
				srcAddr := ADR(sCommand));
				
			// Get the data count, no empty bytes
			nSendDataCount := 0;
			FOR nSendDataCount := 0 TO SIZEOF(arrSendDataBytes) BY 1 DO
				IF arrSendDataBytes[nSendDataCount] = 0 THEN
					EXIT;
				END_IF
			END_FOR

			// Send data
			fbSocketSend(
				bExecute := TRUE,
				cbLen := nSendDataCount,
				pSrc := ADR(arrSendDataBytes),
				hSocket := _clientServerControl.hSocket);
				
			eSsocketSendState := E_SocketSendState.SENDING;
		END_IF
	
	E_SocketSendState.SENDING:
		fbSocketSend(bExecute := FALSE);
		IF fbSocketSend.bError THEN 
			eSsocketSendState := E_SocketSendState.ERROR;
		ELSIF fbSocketSend.bBusy = FALSE THEN
				eSsocketSendState := E_SocketSendState.DONE;
		END_IF
		
	E_SocketSendState.DONE:
		Send := TRUE;
		eSsocketSendState := E_SocketSendState.READY;
		
	E_SocketSendState.ERROR:
		bSendError := TRUE;
		eSsocketSendState := E_SocketSendState.DONE;
		
END_CASE

_errorSending := bSendError;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>