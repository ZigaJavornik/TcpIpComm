<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="LaudaHelper" Id="{5fffc554-b07e-438f-af97-67f733935800}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'hide_all_locals'}

// Provides various helper methods for easier communication with Lauda Pro device. 
// Program does not require being called, a simple access to methods is enough.
PROGRAM LaudaHelper
VAR
	_formatString			: FB_FormatString;
	_laudaCommandGenerator	: FB_LaudaCommandGenerator;	
	_commands				: ST_LaudaCommands;
	_responseErrors			: ST_LaudaResponseErrors;
END_VAR

VAR CONSTANT
	COMMAND_SUFFIX				: STRING := '$R$L';
	SEND_COMMAND_RESPONSE_OK	: STRING := 'OK';
	COMMAND_RESPONSE_ERROR		: STRING := 'ERR_'; 
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Private" Id="{59acb52a-a1f4-04aa-044b-a681555ed3f8}">
      <Folder Name="Methods" Id="{bf389946-fc31-0b77-1bb9-46bf92fb131e}" />
      <Folder Name="Properties" Id="{3a98f59a-2f84-02b5-1cdc-2988f475f22e}" />
    </Folder>
    <Folder Name="Public" Id="{57a9d21d-d9b0-0e4b-2986-08e84353cc9b}">
      <Folder Name="Methods" Id="{0ce23bb0-1661-0761-0d2d-4d07c6b0f58e}" />
      <Folder Name="Properties" Id="{03328be8-04a5-05fc-0935-216101a3474d}" />
    </Folder>
    <Method Name="AddSuffix" Id="{d4bcf624-88d7-4467-b087-94298f8a0749}" FolderPath="Public\Methods\">
      <Declaration><![CDATA[// Adds suffix to the data command.
METHOD PUBLIC AddSuffix : Tc2_System.T_MaxString
VAR_INPUT
	sData	: Tc2_System.T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddSuffix := Tc2_Standard.CONCAT(STR1 := sData, STR2 := COMMAND_SUFFIX);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Commands" Id="{65a9f776-50a4-44f7-8fc7-0db51db49164}" FolderPath="Public\Properties\">
      <Declaration><![CDATA[PROPERTY Commands : REFERENCE TO ST_LaudaCommands]]></Declaration>
      <Get Name="Get" Id="{c092e279-faa9-4839-8226-b43a91eeeedf}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Commands ref= _commands;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="GenerateComand" Id="{b42f95e7-375c-495c-9519-e3b2852ad34d}" FolderPath="Public\Methods\">
      <Declaration><![CDATA[// Provides access to command generation methods.
METHOD PUBLIC GenerateComand : REFERENCE TO FB_LaudaCommandGenerator
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GenerateComand ref= _laudaCommandGenerator;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ParseLaudaFaultDiagnosis" Id="{64cf5f40-1c34-0b5e-36fb-99ee19b87059}" FolderPath="Public\Methods\">
      <Declaration><![CDATA[// Parses the RAW data response for fault diagnosis and returns the faults structure.
METHOD ParseLaudaFaultDiagnosis : ST_LaudaFaults
VAR_INPUT
	sDiagnosisResposne	: Tc2_System.T_MaxString;
END_VAR
VAR
	sTmp		: Tc2_System.T_MaxString;
	nResponse	: BYTE;
	stFaults	: ST_LaudaFaults;
END_VAR

(*

*)
]]></Declaration>
      <Implementation>
        <ST><![CDATA[sTmp := RemoveSuffix(sData := sDiagnosisResposne);

stFaults.Error := INT_TO_BOOL(STRING_TO_INT(Tc2_Standard.MID(
	STR := sTmp,
	POS := 1, 
	LEN := 1)));

stFaults.Alarm := INT_TO_BOOL(STRING_TO_INT(Tc2_Standard.MID(
	STR := sTmp,
	POS := 2, 
	LEN := 1)));
	
stFaults.Warning := INT_TO_BOOL(STRING_TO_INT(Tc2_Standard.MID(
	STR := sTmp,
	POS := 3, 
	LEN := 1)));
	
stFaults.Overtemp := INT_TO_BOOL(STRING_TO_INT(Tc2_Standard.MID(
	STR := sTmp,
	POS := 4, 
	LEN := 1)));
	
stFaults.Sublevel := INT_TO_BOOL(STRING_TO_INT(Tc2_Standard.MID(
	STR := sTmp,
	POS := 5, 
	LEN := 1)));
	
stFaults.HigherLevel := INT_TO_BOOL(STRING_TO_INT(Tc2_Standard.MID(
	STR := sTmp,
	POS := 6, 
	LEN := 1)));
	
stFaults.ExternalControlValueMissing := INT_TO_BOOL(STRING_TO_INT(Tc2_Standard.MID(
	STR := sTmp,
	POS := 7, 
	LEN := 1)));
	
ParseLaudaFaultDiagnosis := stFaults;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ParseResponseError" Id="{219d1fb5-841d-09ea-0930-e6a31641b88a}" FolderPath="Public\Methods\">
      <Declaration><![CDATA[// Parses the error and returns the error message for further diagnosis
METHOD PUBLIC ParseResponseError : E_LaudaResponseError
VAR_INPUT
	Response	: Tc2_System.T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Search the errors from highest to lowest to avoid case such as ERR_30 and you find it with ERR_3
// If success, return
IF Tc2_Standard.FIND(
	STR1 := Response, 
	STR2 := ResponseErrors.CantActivateFromSafetyMode) <> 0 
THEN
	ParseResponseError := E_LaudaResponseError.CANT_ACTIVATE_FROM_SAFETY_MODE;
	RETURN;
END_IF

IF Tc2_Standard.FIND(
	STR1 := Response, 
	STR2 := ResponseErrors.CantStartProgrammer_AnalogSetpointIsUsed) <> 0 
THEN
	ParseResponseError :=  E_LaudaResponseError.CANT_START_PROGRAMMER_ANALOG_SETPOINT_USED;
	RETURN;
END_IF

IF Tc2_Standard.FIND(
	STR1 := Response, 
	STR2 := ResponseErrors.CantSetValue_ProgrammerRunningOrPaused) <> 0 
THEN
	ParseResponseError :=  E_LaudaResponseError.CANT_SET_VALUE_PROGRAMMER_RUNNING_OR_PAUSED;
	RETURN;
END_IF

IF Tc2_Standard.FIND(
	STR1 := Response, 
	STR2 := ResponseErrors.SafetyModeCantBeStarted_ItIsNotEnabled) <> 0 
THEN
	ParseResponseError := E_LaudaResponseError.SAFETY_MODE_CANT_START_IF_NOT_ENABLED;
	RETURN;
END_IF

IF Tc2_Standard.FIND(
	STR1 := Response, 
	STR2 := ResponseErrors.AnalogValueNotPresent) <> 0 
THEN
	ParseResponseError := E_LaudaResponseError.ANALOG_VALUE_NOT_PRESENT;
	RETURN;
END_IF

IF Tc2_Standard.FIND(
	STR1 := Response, 
	STR2 := ResponseErrors.ExternalTemperatureProbeMissing) <> 0 
THEN
	ParseResponseError := E_LaudaResponseError.EXTERNAL_TEMPERATURE_PROBE_MISSING;
	RETURN;
END_IF

IF Tc2_Standard.FIND(
	STR1 := Response, 
	STR2 := ResponseErrors.SetpointNotPossible_AnalogSetpointIsUsed) <> 0 
THEN
	ParseResponseError := E_LaudaResponseError.SETPOINT_NOT_POSSIBLE_WITH_ANALOG_SETPOINT_USED;
	RETURN;
END_IF

IF Tc2_Standard.FIND(
	STR1 := Response, 
	STR2 := ResponseErrors.AllSegmentsInTheProgrammerAreOccupied) <> 0 
THEN
	ParseResponseError := E_LaudaResponseError.ALL_SEGMENTS_IN_THE_PROGRAMMER_OCCUPIED;
	RETURN;
END_IF

IF Tc2_Standard.FIND(
	STR1 := Response, 
	STR2 := ResponseErrors.ModuleOrValueNotAvailable) <> 0 
THEN
	ParseResponseError := E_LaudaResponseError.MODULE_OR_VALUE_NOT_AVAILABLE;
	RETURN;
END_IF

IF Tc2_Standard.FIND(
	STR1 := Response, 
	STR2 := ResponseErrors.ImpermissableValue) <> 0 
THEN
	ParseResponseError := E_LaudaResponseError.IMPERMISSABLE_VALUE;
	RETURN;
END_IF

IF Tc2_Standard.FIND(
	STR1 := Response, 
	STR2 := ResponseErrors.SyntaxError) <> 0 
THEN
	ParseResponseError := E_LaudaResponseError.SYNTAX_ERROR;
	RETURN;
END_IF

IF Tc2_Standard.FIND(
	STR1 := Response, 
	STR2 := ResponseErrors.WrongCommand) <> 0 
THEN
	ParseResponseError := E_LaudaResponseError.WRONG_COMMAND;
	RETURN;
END_IF

IF Tc2_Standard.FIND(
	STR1 := Response, 
	STR2 := ResponseErrors.WrongEntry) <> 0 
THEN
	ParseResponseError := E_LaudaResponseError.WRONG_ENTRY;
	RETURN;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveSuffix" Id="{d1c560ff-3c52-4ccd-ac70-705a364f61ec}" FolderPath="Public\Methods\">
      <Declaration><![CDATA[// Removes suffix from the provided data string
METHOD PUBLIC RemoveSuffix : Tc2_System.T_MaxString
VAR_INPUT
	sData	: Tc2_System.T_MaxString;
END_VAR

VAR
	sDataWithoutSuffix	: Tc2_System.T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Tc2_Utilities.FindAndDelete(
	pDstString := ADR(sDataWithoutSuffix),
	nDstSize := SIZEOF(sDataWithoutSuffix),
	pDeleteString := ADR(COMMAND_SUFFIX),
	pSrcString := ADR(sData));
	
RemoveSuffix := sDataWithoutSuffix;]]></ST>
      </Implementation>
    </Method>
    <Property Name="ResponseErrors" Id="{8315cf31-fb9b-0095-268a-a94f9e3e1fbd}" FolderPath="Public\Properties\">
      <Declaration><![CDATA[PROPERTY ResponseErrors : REFERENCE TO ST_LaudaResponseErrors]]></Declaration>
      <Get Name="Get" Id="{68aed051-4df7-0ae8-3cca-222a8df86581}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ResponseErrors ref= _responseErrors;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ValidateReadCommandResponse" Id="{3e9bb6f0-4f52-45f6-be32-87d90659a4b4}" FolderPath="Public\Methods\">
      <Declaration><![CDATA[// Validates the response when doing a read command to Lauda Pro Thermostat.
// Returns TRUE if response is valid, or FALSE if it is not valid or an error was reported.
METHOD PUBLIC ValidateReadCommandResponse : BOOL
VAR_INPUT
	sResponse	: Tc2_System.T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ValidateReadCommandResponse := 
	Tc2_Standard.FIND(STR1 := sResponse, STR2 := COMMAND_RESPONSE_ERROR) = 0 AND
	Tc2_Standard.FIND(STR1 := sResponse, STR2 := COMMAND_SUFFIX) <> 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ValidateSendCommandResponse" Id="{d421eeb7-a47e-4746-822d-a5ed71f341b1}" FolderPath="Public\Methods\">
      <Declaration><![CDATA[// Validates the response when doing a write command to Lauda Pro Thermostat.
// Returns TRUE if response is valid, or FALSE if it is not valid or an error was reported
METHOD PUBLIC ValidateSendCommandResponse : BOOL
VAR_INPUT
	sResponse	: Tc2_System.T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ValidateSendCommandResponse := 
	Tc2_Standard.FIND(STR1 := sResponse, STR2 := SEND_COMMAND_RESPONSE_OK) <> 0 AND
	Tc2_Standard.FIND(STR1 := sResponse, STR2 := COMMAND_RESPONSE_ERROR) = 0 AND
	Tc2_Standard.FIND(STR1 := sResponse, STR2 := COMMAND_SUFFIX) <> 0;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>