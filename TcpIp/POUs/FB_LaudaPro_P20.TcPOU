<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_LaudaPro_P20" Id="{cbfeb6cd-1449-4be7-bbd0-eed5b27b74dd}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_LaudaPro_P20

VAR_INPUT
	fTemperatureSet	: REAL;
END_VAR

VAR_OUTPUT
	fTemperatureSetpoint_Actual	: REAL;
	fBathOutflowTemperature		: REAL;
	bError						: BOOL;
	bConnected					: BOOL;
END_VAR

VAR
	fbTcpIpControl		: FB_TcpIpControl;
	stCommParameters	: ST_LaudaCommParameters;	
	TonReadCycleTimer	: TON;
	fPrevTemperatureSet	: REAL;
	fbCommandGenerator	: FB_LaudaCommandGenerator;
	sResponse			: Tc2_System.T_MaxString;
	bSendFlag			: BOOL;
	bReadFlag			: BOOL;
	TonReconnectTimer	: TON;
	responseString		: Tc2_System.T_MaxString;
END_VAR

VAR CONSTANT
	COMMANDS	: ST_LaudaCommands;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TonReconnectTimer(IN := NOT TonReconnectTimer.Q, pt := T#500MS);
fbTcpIpControl();

IF fbTcpIpControl.Error AND NOT TonReconnectTimer.Q THEN
	fbTcpIpControl.Disconnect();
ELSIF fbTcpIpControl.IsConnected = FALSE THEN
	fbTcpIpControl.Connect(
		Ipv4Address := stCommParameters.Ipv4Address, 
		Port := stCommParameters.Port);
END_IF

IF fPrevTemperatureSet <> fTemperatureSet THEN
	bSendFlag := TRUE;
END_IF

IF bSendFlag AND NOT bReadFlag THEN
	IF fbTcpIpControl.SendAscii(
		sCommand := fbCommandGenerator.SetTemperature(fTemperature := fTemperatureSet), 
		refResponse := sResponse)
	THEN
		bSendFlag := FALSE;
	END_IF
END_IF


fPrevTemperatureSet := fTemperatureSet;
bConnected := fbTcpIpControl.IsConnected;

TonReadCycleTimer(IN := NOT TonReadCycleTimer.Q AND NOT bSendFlag, pt := stCommParameters.ReadCycle);
IF TonReadCycleTimer.Q THEN
	bReadFlag := TRUE;
END_IF

ReadParameters();]]></ST>
    </Implementation>
    <Property Name="CommParameters" Id="{c3e16bc9-a4cc-4b05-9799-55162badeedb}">
      <Declaration><![CDATA[PROPERTY CommParameters : REFERENCE TO ST_LaudaCommParameters]]></Declaration>
      <Get Name="Get" Id="{e16a1ca0-88cb-4ece-9171-ac45dcaf3038}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[CommParameters ref= stCommParameters;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{ee23e012-70a8-42d5-9bb8-c2a8b6c56b05}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[stCommParameters := CommParameters;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="ReadParameters" Id="{8262ebc3-39d0-44ea-bb24-a1d54526e1a7}">
      <Declaration><![CDATA[METHOD PRIVATE ReadParameters
VAR_INPUT
END_VAR
VAR_INST
	eReadParametersStep	: E_LaudaParameterReadState;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE eReadParametersStep OF
	E_LaudaParameterReadState.START:
		IF bReadFlag THEN
			eReadParametersStep := E_LaudaParameterReadState.ACTUAL_TEMPERATURE_SETPOINT;
		END_IF
	E_LaudaParameterReadState.BAH_OUTFLOW_TEMP:
		IF fbTcpIpControl.SendAscii(sCommand := CONCAT(COMMANDS.ReadCommands.Temperature.BathTemperatureOutflow_001C, '$R$N'), refResponse := responseString) THEN
			fBathOutflowTemperature := STRING_TO_REAL(RemoveSuffix(responseString));
			eReadParametersStep := E_LaudaParameterReadState.ACTUAL_TEMPERATURE_SETPOINT;
		END_IF
		
	E_LaudaParameterReadState.ACTUAL_TEMPERATURE_SETPOINT:
		IF fbTcpIpControl.SendAscii(sCommand := CONCAT(COMMANDS.ReadCommands.Temperature.TemperatureSetpoint, '$R$N'), refResponse := responseString) THEN
			fTemperatureSetpoint_Actual := STRING_TO_REAL(RemoveSuffix(responseString));
			eReadParametersStep := E_LaudaParameterReadState.DONE;
		END_IF
	
	E_LaudaParameterReadState.DONE:
		bReadFlag := FALSE;
		eReadParametersStep := E_LaudaParameterReadState.START;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveSuffix" Id="{88861a14-50dc-4f3d-8719-bc197f5bab18}">
      <Declaration><![CDATA[METHOD PRIVATE RemoveSuffix : T_MaxString
VAR_INPUT
	response	: Tc2_System.T_MaxString;
END_VAR

VAR
	result	: Tc2_System.T_MaxString;
END_VAR

VAR CONSTANT
	SUFFIX	: STRING := '$R$N';
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Tc2_Utilities.FindAndDelete(
	pDstString := ADR(result),
	nDstSize := SIZEOF(result),
	pDeleteString := ADR(SUFFIX),
	pSrcString := ADR(response));
	
RemoveSuffix := result;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>